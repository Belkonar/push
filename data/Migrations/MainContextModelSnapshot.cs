// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using data;
using shared.Models;
using shared.Models.Job;
using shared.Models.Pipeline;

#nullable disable

namespace data.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("data.ORM.ConfigDto", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.ToTable("config");
                });

            modelBuilder.Entity("data.ORM.DeployableDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Deployable>("Contents")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("contents");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<Guid>("ThingId")
                        .HasColumnType("uuid")
                        .HasColumnName("thing");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("ThingId")
                        .IsUnique();

                    b.ToTable("deployable");
                });

            modelBuilder.Entity("data.ORM.JobDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Job>("Contents")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("contents");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("StatusReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statusReason");

                    b.Property<Guid>("ThingId")
                        .HasColumnType("uuid")
                        .HasColumnName("thing");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("ThingId");

                    b.ToTable("job");
                });

            modelBuilder.Entity("data.ORM.OrganizationDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Organization>("Contents")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("contents");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("organization");
                });

            modelBuilder.Entity("data.ORM.PipelineDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("pipeline");
                });

            modelBuilder.Entity("data.ORM.PipelineVersionDTO", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid")
                        .HasColumnName("pipeline_id");

                    b.Property<PipelineVersionContents>("Contents")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("contents");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated");

                    b.HasKey("Version", "PipelineId");

                    b.HasIndex("PipelineId");

                    b.ToTable("pipeline_version");
                });

            modelBuilder.Entity("data.ORM.PolicyDto", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("policy");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated");

                    b.HasKey("Key");

                    b.ToTable("policy");
                });

            modelBuilder.Entity("data.ORM.ThingDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Thing>("Contents")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("contents");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("thing");
                });

            modelBuilder.Entity("data.ORM.DeployableDto", b =>
                {
                    b.HasOne("data.ORM.ThingDto", null)
                        .WithOne()
                        .HasForeignKey("data.ORM.DeployableDto", "ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("data.ORM.JobDto", b =>
                {
                    b.HasOne("data.ORM.ThingDto", null)
                        .WithMany()
                        .HasForeignKey("ThingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("data.ORM.PipelineDTO", b =>
                {
                    b.HasOne("data.ORM.OrganizationDto", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("data.ORM.PipelineVersionDTO", b =>
                {
                    b.HasOne("data.ORM.PipelineDTO", null)
                        .WithMany()
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("data.ORM.ThingDto", b =>
                {
                    b.HasOne("data.ORM.OrganizationDto", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
