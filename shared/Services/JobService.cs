// <auto-generated/>

using shared.Models.Job;
using System.Net.Http.Json;
using shared.UpdateModels;
using shared.Models;
using shared.Interfaces;

namespace shared.services;

public class JobService : IJobController
{
    private readonly HttpClient _client;
    
    private const string Prefix = "/Job";
    
    public JobService(IHttpClientFactory factory)
    {
        _client = factory.CreateClient("api");
    }

    public async Task<List<Job>> GetJobByStatus(string status)
    {
        var route = $"{Prefix}/?status={status}";

        var httpResponse = await _client.GetAsync(route);
        httpResponse.EnsureSuccessStatusCode();
        return await httpResponse.Content.ReadFromJsonAsync<List<Job>>() ?? new List<Job>();
    }

    public async Task<List<Job>> GetSafeJobs(Nullable<Guid> id)
    {
        var route = $"{Prefix}/safe?id={id}";

        var httpResponse = await _client.GetAsync(route);
        httpResponse.EnsureSuccessStatusCode();
        return await httpResponse.Content.ReadFromJsonAsync<List<Job>>() ?? new List<Job>();
    }

    public async Task<Job> GetJob(Guid id)
    {
        var route = $"{Prefix}/{id}";

        var httpResponse = await _client.GetAsync(route);
        httpResponse.EnsureSuccessStatusCode();
        return (await httpResponse.Content.ReadFromJsonAsync<Job>())!;
    }

    public async Task<Job> GetSafeJob(Guid id)
    {
        var route = $"{Prefix}/{id}/safe";

        var httpResponse = await _client.GetAsync(route);
        httpResponse.EnsureSuccessStatusCode();
        return (await httpResponse.Content.ReadFromJsonAsync<Job>())!;
    }

    public async Task UpdateStatus(Guid id, UpdateStatus status)
    {
        var route = $"{Prefix}/{id}/status";


        var httpResponse = await _client.PostAsJsonAsync(route, status);

        httpResponse.EnsureSuccessStatusCode();
    }

    public async Task UpdateStepStatus(Guid id, int ordinal, UpdateStatus status)
    {
        var route = $"{Prefix}/{id}/step/{ordinal}/status";


        var httpResponse = await _client.PostAsJsonAsync(route, status);

        httpResponse.EnsureSuccessStatusCode();
    }

    public async Task<SimpleValue> GetStepOutput(Guid id, int ordinal)
    {
        var route = $"{Prefix}/{id}/step/{ordinal}/output";

        var httpResponse = await _client.GetAsync(route);
        httpResponse.EnsureSuccessStatusCode();
        return (await httpResponse.Content.ReadFromJsonAsync<SimpleValue>())!;
    }

    public async Task UpdateStepOutput(Guid id, int ordinal, SimpleValue output)
    {
        var route = $"{Prefix}/{id}/step/{ordinal}/output";


        var httpResponse = await _client.PutAsJsonAsync(route, output);

        httpResponse.EnsureSuccessStatusCode();
    }

    public async Task ApproveStep(Guid id, int ordinal)
    {
        var route = $"{Prefix}/{id}/approve/{ordinal}";


        var httpResponse = await _client.PostAsync(route, null);

        httpResponse.EnsureSuccessStatusCode();
    }

    public async Task FinalizeStep(Guid id, int ordinal, ExecutorResponse response)
    {
        var route = $"{Prefix}/{id}/step/{ordinal}/finalize";


        var httpResponse = await _client.PostAsJsonAsync(route, response);

        httpResponse.EnsureSuccessStatusCode();
    }

    public async Task AddFeature(Guid id, JobFeature feature)
    {
        var route = $"{Prefix}/{id}/feature";


        var httpResponse = await _client.PostAsync(route, null);

        httpResponse.EnsureSuccessStatusCode();
    }

    public async Task AddDeployment(DeploymentRecord deployment)
    {
        var route = $"{Prefix}/deployment";


        var httpResponse = await _client.PostAsJsonAsync(route, deployment);

        httpResponse.EnsureSuccessStatusCode();
    }

}