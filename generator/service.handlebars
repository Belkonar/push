// <auto-generated/>

{{#Namespaces}}
using {{Value}};
{{/Namespaces}}

namespace shared.services;

public class {{ ShortName }}Service : I{{ Name }}
{
    private readonly HttpClient _client;
    
    private const string Prefix = "/{{ShortName}}";
    
    public {{ ShortName }}Service(IHttpClientFactory factory)
    {
        _client = factory.CreateClient("api");
    }

    {{#Methods}}
    public async {{{FullType}}} {{Name}}({{#Parameters}}{{{FullType}}} {{Name}}{{#unless @last}}, {{/unless}}{{/Parameters}})
    {
        var route = $"{Prefix}/{{Route}}{{Query}}";

        {{#if IsGet}}
        var httpResponse = await _client.GetAsync(route);
        {{else}}

        {{#if BodyName}}
        var httpResponse = await _client.{{HttpMethod}}AsJsonAsync(route, {{BodyName}});
        {{else}}
        var httpResponse = await _client.{{HttpMethod}}Async(route, null);
        {{/if}}

        {{/if}}
        httpResponse.EnsureSuccessStatusCode();
        {{#if HasReturn}}
        {{#if DefaultResponse}}
        return await httpResponse.Content.ReadFromJsonAsync<{{{ReturnType}}}>() ?? {{{DefaultResponse}}};
        {{else}}
        return (await httpResponse.Content.ReadFromJsonAsync<{{{ReturnType}}}>())!;
        {{/if}}
        {{/if}}
    }

    {{/Methods}}
}