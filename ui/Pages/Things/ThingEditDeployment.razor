@using System.Net
@using shared.Models
@using shared.Models.Job
@using shared.Models.Pipeline
@using shared.UpdateModels
@inject HttpClient Http;
@inject ToastService Toaster
@inject NavigationManager Nav

@if (View != null)
{
    if (Pipeline == null)
    {
        <a class="btn btn-primary" href="/thing/@Id/select-pipeline">Select a pipeline</a>
    }
    else
    {
        <div>
            <div>
                <div>Using pipeline: @Pipeline.Name</div>
                @if (Version != null)
                {
                    <div>Using version: @Version.Id.Version</div>
                }
            </div>
            <div class="form-group">
                <label>Source Control URI</label>
                <input type="text" class="form-control" @bind="View.SourceControlUri">
            </div>
            <div class="form-group">
                <label for="constraint">Constraint</label>
                <input @onchange="Callback" id="constraint" type="text" class="form-control" value="@View.PipelineConstraint">
            </div>

            <h4>Pipeline Parameters</h4>
            
            @if (Parameters.Count == 0)
            {
                <p>Ain't Nobody Here but Us Chickens</p>
            }

            @foreach (var parameter in Parameters)
            {
                <div class="form-group">
                    <label for="@parameter.Name">@parameter.Name</label>
                    <div class="input-group">
                        @if (parameter.Kind == "string")
                        {
                            <input @bind="Variables[parameter.Name]" type="text" class="form-control" id="@parameter.Name">    
                        }
                        
                        @if (parameter.Kind == "credential")
                        {
                            <select class="form-control" @bind="Variables[parameter.Name]">
                                <option value="">Please Select</option>
                                @foreach (var cred in Credentials.Where(x => x.Kind == parameter.SubKind))
                                {
                                    <option value="@cred.Id.ToString()">@cred.Name</option>
                                }
                            </select>   
                        }
                        

                        @if (!parameter.Local)
                        {
                            <button @onclick="async () => await UpdateOrgVariable(parameter)" class="btn btn-secondary">Update Org</button>
                        }
                    </div>
                </div>
            }
            
            <button @onclick="Save" class="btn btn-primary">Save</button>
            <button @onclick="Deploy" class="btn btn-warning">Deploy</button>
        </div>
    }
}
else
{
    <span>Loading...</span>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private Deployable? View { get; set; } = null;
    private Thing? Thing { get; set; } = null;
    private Organization? Organization { get; set; } = null;

    private List<Credential> Credentials { get; set; } = new List<Credential>();
    
    private Pipeline? Pipeline { get; set; } = null;
    private PipelineVersion? Version { get; set; } = null;
    private List<StepParameter> Parameters { get; set; } = new List<StepParameter>();
    
    private Dictionary<string, string> Variables { get; set; } = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        View = (await Http.GetFromJsonAsync<Deployable>($"/thing/{Id}/deployable"))!;
        Thing = (await Http.GetFromJsonAsync<Thing>($"/thing/{Id}"))!;
        Organization = (await Http.GetFromJsonAsync<Organization>($"/organization/{Thing!.OrganizationId}"))!;

        Credentials = await Http.GetFromJsonAsync<List<Credential>>($"/organization/{Thing!.OrganizationId}/credential") ?? new List<Credential>();
        
        Console.WriteLine(Credentials.Count);
        
        Variables = View.Variables;

        if (View.PipelineId.HasValue)
        {
            Pipeline = await Http.GetFromJsonAsync<Pipeline>($"/pipeline/{View.PipelineId}");

            if (!string.IsNullOrWhiteSpace(View.PipelineConstraint))
            {
                Version = 
                    await Http.GetFromJsonAsync<PipelineVersion>($"/pipeline/{View.PipelineId}/version/{View.PipelineConstraint}");
                ResetParameters();
            }
        }
    }

    private async Task Deploy()
    {
        // http://localhost:5183/thing/206ebaf4-2e2e-492a-8271-dfd8b543cb81/deployable/start/main
        if (Thing == null)
        {
            return;
        }

        var response = await Http.PostAsync($"/thing/{Thing.Id}/deployable/start/main", null);

        try
        {
            response.EnsureSuccessStatusCode();

            var job = await response.Content.ReadFromJsonAsync<Job>();
            Nav.NavigateTo($"/job/{job!.Id}");
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
        }
    }

    private async Task Callback(ChangeEventArgs arg)
    {
        Version = null;
        var constraint = arg.Value?.ToString() ?? "";
        View!.PipelineConstraint = constraint;

        if (string.IsNullOrWhiteSpace(constraint))
        {
            ResetParameters();
            return;
        }

        using var response = await Http.GetAsync($"/pipeline/{View.PipelineId}/version/{View.PipelineConstraint}");

        if (response.StatusCode == HttpStatusCode.NotFound)
        {
            // In this case 404's are OK!
            ResetParameters();
            return;
        }

        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (Exception e)
        {
            // TODO: Add toast here
            ResetParameters();
            return;
        }

        Version = await response.Content.ReadFromJsonAsync<PipelineVersion>();
        ResetParameters();
    }

    private async Task UpdateOrgVariable(StepParameter parameter)
    {
        var response = await Http.PutAsJsonAsync($"/organization/{Thing!.OrganizationId}/variable", new UpdateOrganizationVariable()
        {
            Key = parameter.Name,
            Value = Variables[parameter.Name]
        });

        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
            return;
        }
        
        Toaster.AddSuccess($"Updated organization variable `{parameter.Name}`");
    }

    private async Task Save()
    {
        // TODO: Remove variables no longer needed
        View!.Variables = Variables;
        
        using var response = await Http.PutAsJsonAsync($"/Thing/{Id}/deployable", View);
        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
            return;
        }
        Toaster.AddSuccess("Saved Deployment");
    }

    private void ResetParameters()
    {
        if (Version == null)
        {
            Parameters = new List<StepParameter>();
            return;
        }

        Parameters = Version.CompiledParameters;

        foreach (var parameter in Version.CompiledParameters)
        {
            if (!Variables.ContainsKey(parameter.Name))
            {
                Variables[parameter.Name] = "";
            }

            if (string.IsNullOrWhiteSpace(Variables[parameter.Name]) && !parameter.Local)
            {
                // TODO: check against org variables
                if (Organization!.Variables.ContainsKey(parameter.Name))
                {
                    Variables[parameter.Name] = Organization!.Variables[parameter.Name];
                }
            }
        }
    }
}