@page "/organization/{Id:guid}"
@using ui.Models
@using shared.UpdateModels
@using shared.Models
@inject HttpClient Http
@inject ToastService Toaster

<PageTitle>Organization Edit</PageTitle>

<h3>Organization Edit</h3>

<Card>
    <div>
        <a class="btn btn-secondary" href="/organization/@Id/create-app">Create App</a>
    </div>
    
    <div class="form-group">
        <label class="form-label" for="name">Name:</label>
        <input class="form-control" id="name" type="text" @bind="Name">
    </div>
    <div class="form-group">
        <button @onclick="SaveBasics" class="btn btn-primary">Save Basics</button>
    </div>

    <hr/>

    <div class="form-group">
        <span class="form-label">Metadata:</span>
        <MetaData Value="Meta"/>
    </div>
    <div class="form-group">
        <button @onclick="SaveMetadata" class="btn btn-primary">Save Metadata</button>
    </div>

    <hr/>

    <div class="form-group">
        <span class="form-label">Private Metadata:</span>
        <MetaData Value="PrivateMeta"/>
    </div>
    <div class="form-group">
        <button @onclick="SavePrivateMetadata" class="btn btn-primary">Save Private Metadata</button>
    </div>

    <hr/>
</Card>
<br/>
<Card>
    <h5>Credentials</h5>
    <a href="/credential-create/@Id" class="btn btn-primary">Create</a>
    <Table>
        <THead>
        <th>Name</th>
        <th>Kind</th>
        <th>Is Managed</th>
        </THead>
        <TBody>
        @foreach (var credential in Credentials)
        {
            <tr>
                <td><a href="/credential/@credential.Id">@credential.Name</a></td>
                <td>@credential.Kind</td>
                <td>@credential.IsManaged</td>
            </tr>
        }
        </TBody>
    </Table>
</Card>

@code {
    public string Title = "Organization Edit - ";
    
    [Parameter]
    public Guid Id { get; set; }

    private string Name { get; set; } = "";
    public List<KeyValue> Meta = new List<KeyValue>();
    public List<KeyValue> PrivateMeta = new List<KeyValue>();

    private List<Credential> Credentials { get; set; } = new List<Credential>(); 

    protected override async Task OnInitializedAsync()
    {
        // TODO: Error handle this lol
        var response = await Http.GetFromJsonAsync<Organization>($"/organization/{Id}");

        if (response == null)
        {
            return;
        }
        
        Name = response.Name;

        Title += Name;

        Meta.AddRange(response.Metadata.GetKVList());
        
        PrivateMeta.AddRange(response.PrivateMetadata.GetKVList());

        Credentials = await Http.GetFromJsonAsync<List<Credential>>($"/organization/{Id}/credential") ?? new List<Credential>();
    }

    public async Task SaveBasics()
    {
        var request = new UpdateOrganization()
        {
            Name = Name
        };

        try
        {
            using var response = await Http.PutAsJsonAsync($"/organization/{Id}", request);
            response.EnsureSuccessStatusCode();
            
            Toaster.AddSuccess("Basics Saved");
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
        }
    }

    public async Task SaveMetadata()
    {
        var request = Meta.GetDictionary();

        try
        {
            using var response = await Http.PutAsJsonAsync($"/organization/{Id}/metadata", request);
            response.EnsureSuccessStatusCode();

            Toaster.AddSuccess("Metadata Saved");
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
        }
    }
    
    public async Task SavePrivateMetadata()
    {
        var request = PrivateMeta.GetDictionary();

        try
        {
            using var response = await Http.PutAsJsonAsync($"/organization/{Id}/private_metadata", request);
            response.EnsureSuccessStatusCode();

            Toaster.AddSuccess("Private Metadata Saved");
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
        }
    }
}