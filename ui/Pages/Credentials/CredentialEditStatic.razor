@using shared.Models
@using ui.Models

@inject HttpClient Http
@inject ToastService Toaster

<hr>

<h5>Headers</h5>
<MetaData Value="Headers"></MetaData>

<hr/>
<h5>Files</h5>

@foreach (var file in Files)
{
    <div>
        <div class="form-group">
            <label>FileName</label>
            <div class="input-group">
                <input class="form-control" @bind="file.Key" />
                <button @onclick="() => Remove(file)" class="btn btn-danger"><span class="oi oi-trash" aria-hidden="true"></span></button>
            </div>
        </div>
        <div class="form-group">
            <label>File Contents</label>
            <textarea class="form-control" @bind="file.Value"></textarea>
        </div>
    </div>
}

<button @onclick="Add" class="btn btn-warning">Add</button>

<hr>
<button class="btn btn-primary" @onclick="Save">Save</button>

@code {
    [Parameter]
    public Credential Cred { get; set; }
    
    [Parameter]
    public Guid Id { get; set; }

    public List<KeyValue> Headers { get; set; } = new List<KeyValue>();
    public List<KeyValue> Files { get; set; } = new List<KeyValue>();

    protected override void OnInitialized()
    {
        foreach (var data in Cred.Data)
        {
            var parts = data.Key.Split(":");

            if (parts[0] == "header")
            {
                Headers.Add(new KeyValue()
                {
                    Key = parts[1],
                    Value = data.Value
                });
            }
            else
            {
                Files.Add(new KeyValue()
                {
                    Key = data.Key,
                    Value = data.Value
                });
            }
        }
    }

    private void Remove(KeyValue kv)
    {
        Files.Remove(kv);
    }
    
    private void Add()
    {
        Files.Add(new KeyValue());
    }

    private async Task Save()
    {
        var request = new Dictionary<string, string>();

        foreach (var header in Headers)
        {
            request.Add($"header:{header.Key}", header.Value);
        }

        foreach (var file in Files)
        {
            request.Add(file.Key, file.Value);
        }

        try
        {
            using var response = await Http.PutAsJsonAsync($"/organization/credential/{Id}", request);
            response.EnsureSuccessStatusCode();
            Toaster.AddSuccess("Credential Saved");
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
        }
    }
}