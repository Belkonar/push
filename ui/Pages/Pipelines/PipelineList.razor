@page "/pipelines"
@page "/thing/{Id:guid}/select-pipeline"
@using shared.Models.Pipeline

@inject ToastService Toaster
@inject NavigationManager Nav

@inject IPipelineController PipelineService
@inject IThingController ThingService

<h3>@Title</h3>

<PageTitle>@Title</PageTitle>

<Card>
    <Table>
        <THead>
        <th>Name</th>
        @if (Id.HasValue)
        {
            <th>Actions</th>
        }
        </THead>
        <TBody>
        @foreach (var pipeline in Pipelines)
        {
            <tr>
                <td><a href="/pipeline/@pipeline.Id">@pipeline.Name</a></td>
                @if (Id.HasValue)
                {
                    <td><button @onclick="async () => await SelectPipeline(pipeline.Id)" class="btn btn-primary btn-sm">Select</button></td>
                }
            </tr>
        }
        </TBody>
    </Table>
</Card>

@code {
    [Parameter]
    public Guid? Id { get; set; }
    
    const string Title = "Pipeline List";

    private List<Pipeline> Pipelines { get; set; } = new List<Pipeline>();

    protected override async Task OnInitializedAsync()
    {
        Pipelines = await PipelineService.GetPipelines(null);
    }

    private async Task SelectPipeline(Guid pipelineId)
    {
        var deployment = await ThingService.GetDeployable(Id!.Value);
        
        deployment.PipelineId = pipelineId;

        try
        {
            deployment.PipelineConstraint = (await PipelineService.GetLatestMajor(pipelineId)).Value;
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
        }

        try
        {
            await ThingService.UpdateDeployable(Id.Value, deployment);
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
        }
        
        Toaster.AddSuccess("Saved Pipeline");
        Nav.NavigateTo($"/thing/{Id}");
    }

}