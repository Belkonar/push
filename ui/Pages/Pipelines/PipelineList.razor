@page "/pipelines"
@page "/thing/{Id:guid}/select-pipeline"
@using shared.Models

@inject HttpClient http
@inject ToastService Toaster
@inject NavigationManager Nav

<h3>@Title</h3>

<PageTitle>@Title</PageTitle>

<Card>
    <Table>
        <THead>
        <th>Name</th>
        @if (Id.HasValue)
        {
            <th>Actions</th>
        }
        </THead>
        <TBody>
        @foreach (var pipeline in Pipelines)
        {
            <tr>
                <td><a href="/pipeline/@pipeline.Id">@pipeline.Name</a></td>
                @if (Id.HasValue)
                {
                    <td><button @onclick="async () => await SelectPipeline(pipeline.Id)" class="btn btn-primary btn-sm">Select</button></td>
                }
            </tr>
        }
        </TBody>
    </Table>
</Card>

@code {
    [Parameter]
    public Guid? Id { get; set; }
    
    const string Title = "Pipeline List";

    private List<Pipeline> Pipelines { get; set; } = new List<Pipeline>();

    protected override async Task OnInitializedAsync()
    {
        Pipelines = await http.GetFromJsonAsync<List<Pipeline>>("/pipeline") ?? new List<Pipeline>();
    }

    private async Task SelectPipeline(Guid pipelineId)
    {
        Console.WriteLine("wot");
        var deployment = (await http.GetFromJsonAsync<Deployable>($"/thing/{Id}/deployable"))!;
        deployment.PipelineId = pipelineId;
        deployment.PipelineConstraint =
            (await http.GetFromJsonAsync<SimpleValue>($"/pipeline/{pipelineId}/latest"))?.Value ?? "";
        
        using var response = await http.PutAsJsonAsync($"/Thing/{Id}/deployable", deployment);
        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (Exception e)
        {
            Toaster.AddError(e);
            return;
        }
        Toaster.AddSuccess("Saved Pipeline");
        Nav.NavigateTo($"/thing/{Id}");
    }

}